name: Release

on:
  push:
    branches: [ dev, feature/* ]
  pull_request:
    branches: [ dev, feature/* ]

jobs:

  build:
    runs-on: ubuntu-latest
    environment: staging
    steps:
    - uses: actions/checkout@v2

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.16

    - name: Build
      run: go build -v ./...

    - name: Test
      run: go test -v ./...

    - name: Setup build variables
      id: setup
      run: |
        TICKET=$(echo ${GITHUB_REF} | sed -e "s/refs\/heads\///g" | sed -e "s/feature\///g")
        echo "::set-output name=today::$(date +'%Y%m%d%H')"
        echo "::set-output name=ticket::${TICKET}"
    - name: Create build
      run: |
        env GOOS=linux GARCH=amd64 CGO_ENABLED=0 go build -o blog-aggregator -tags server
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        role-to-assume: ${{ env.AWS_ROLE }}
        role-duration-seconds: 1200
        role-session-name: blogaggergator{{ github.sha }}
        role-skip-session-tagging: true
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: Build and tag the image
      run: |
        docker build \
          -t ${AWS_REGISTRY_URL}:${{ github.sha }} \
          -t ${AWS_REGISTRY_URL}:${{ steps.setup.outputs.ticket }} \
          --target app .
    - name: Push to ECR
      run: |
        docker push ${AWS_REGISTRY_URL}:${{ github.sha }}
        docker push ${AWS_REGISTRY_URL}:${{ steps.setup.outputs.ticket }}
    - name: Update ECS service
      run: |
        aws ecs update-service --service blogs{{ steps.setup.outputs.ticket }}-service --cluster ${AWS_CLUSTER_NAME} --force-new-deployment

        
