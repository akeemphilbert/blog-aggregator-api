// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package api_test

import (
	"context"
	"github.com/wepala/blog-aggregator-api/src"
	"github.com/wepala/weos"
	"sync"
)

// Ensure, that ProjectionMock does implement api.Projection.
// If this is not the case, regenerate this file with moq.
var _ api.Projection = &ProjectionMock{}

// ProjectionMock is a mock implementation of api.Projection.
//
// 	func TestSomethingThatUsesProjection(t *testing.T) {
//
// 		// make and configure a mocked api.Projection
// 		mockedProjection := &ProjectionMock{
// 			GetBlogByIDFunc: func(id string) (*api.Blog, error) {
// 				panic("mock out the GetBlogByID method")
// 			},
// 			GetBlogByURLFunc: func(url string) (*api.Blog, error) {
// 				panic("mock out the GetBlogByURL method")
// 			},
// 			GetCategoriesFunc: func(page int, limit int, sortOptions map[string]string, filterOptions map[string]interface{}) ([]*api.Category, int64, error) {
// 				panic("mock out the GetCategories method")
// 			},
// 			GetEventHandlerFunc: func() weos.EventHandler {
// 				panic("mock out the GetEventHandler method")
// 			},
// 			GetPostsFunc: func(page int, limit int, query string, sortOptions map[string]string, filterOptions map[string]interface{}) ([]*api.Post, int64, error) {
// 				panic("mock out the GetPosts method")
// 			},
// 			MigrateFunc: func(ctx context.Context) error {
// 				panic("mock out the Migrate method")
// 			},
// 		}
//
// 		// use mockedProjection in code that requires api.Projection
// 		// and then make assertions.
//
// 	}
type ProjectionMock struct {
	// GetBlogByIDFunc mocks the GetBlogByID method.
	GetBlogByIDFunc func(id string) (*api.Blog, error)

	// GetBlogByURLFunc mocks the GetBlogByURL method.
	GetBlogByURLFunc func(url string) (*api.Blog, error)

	// GetCategoriesFunc mocks the GetCategories method.
	GetCategoriesFunc func(page int, limit int, sortOptions map[string]string, filterOptions map[string]interface{}) ([]*api.Category, int64, error)

	// GetEventHandlerFunc mocks the GetEventHandler method.
	GetEventHandlerFunc func() weos.EventHandler

	// GetPostsFunc mocks the GetPosts method.
	GetPostsFunc func(page int, limit int, query string, sortOptions map[string]string, filterOptions map[string]interface{}) ([]*api.Post, int64, error)

	// MigrateFunc mocks the Migrate method.
	MigrateFunc func(ctx context.Context) error

	// calls tracks calls to the methods.
	calls struct {
		// GetBlogByID holds details about calls to the GetBlogByID method.
		GetBlogByID []struct {
			// ID is the id argument value.
			ID string
		}
		// GetBlogByURL holds details about calls to the GetBlogByURL method.
		GetBlogByURL []struct {
			// URL is the url argument value.
			URL string
		}
		// GetCategories holds details about calls to the GetCategories method.
		GetCategories []struct {
			// Page is the page argument value.
			Page int
			// Limit is the limit argument value.
			Limit int
			// SortOptions is the sortOptions argument value.
			SortOptions map[string]string
			// FilterOptions is the filterOptions argument value.
			FilterOptions map[string]interface{}
		}
		// GetEventHandler holds details about calls to the GetEventHandler method.
		GetEventHandler []struct {
		}
		// GetPosts holds details about calls to the GetPosts method.
		GetPosts []struct {
			// Page is the page argument value.
			Page int
			// Limit is the limit argument value.
			Limit int
			// Query is the query argument value.
			Query string
			// SortOptions is the sortOptions argument value.
			SortOptions map[string]string
			// FilterOptions is the filterOptions argument value.
			FilterOptions map[string]interface{}
		}
		// Migrate holds details about calls to the Migrate method.
		Migrate []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockGetBlogByID     sync.RWMutex
	lockGetBlogByURL    sync.RWMutex
	lockGetCategories   sync.RWMutex
	lockGetEventHandler sync.RWMutex
	lockGetPosts        sync.RWMutex
	lockMigrate         sync.RWMutex
}

// GetBlogByID calls GetBlogByIDFunc.
func (mock *ProjectionMock) GetBlogByID(id string) (*api.Blog, error) {
	if mock.GetBlogByIDFunc == nil {
		panic("ProjectionMock.GetBlogByIDFunc: method is nil but Projection.GetBlogByID was just called")
	}
	callInfo := struct {
		ID string
	}{
		ID: id,
	}
	mock.lockGetBlogByID.Lock()
	mock.calls.GetBlogByID = append(mock.calls.GetBlogByID, callInfo)
	mock.lockGetBlogByID.Unlock()
	return mock.GetBlogByIDFunc(id)
}

// GetBlogByIDCalls gets all the calls that were made to GetBlogByID.
// Check the length with:
//     len(mockedProjection.GetBlogByIDCalls())
func (mock *ProjectionMock) GetBlogByIDCalls() []struct {
	ID string
} {
	var calls []struct {
		ID string
	}
	mock.lockGetBlogByID.RLock()
	calls = mock.calls.GetBlogByID
	mock.lockGetBlogByID.RUnlock()
	return calls
}

// GetBlogByURL calls GetBlogByURLFunc.
func (mock *ProjectionMock) GetBlogByURL(url string) (*api.Blog, error) {
	if mock.GetBlogByURLFunc == nil {
		panic("ProjectionMock.GetBlogByURLFunc: method is nil but Projection.GetBlogByURL was just called")
	}
	callInfo := struct {
		URL string
	}{
		URL: url,
	}
	mock.lockGetBlogByURL.Lock()
	mock.calls.GetBlogByURL = append(mock.calls.GetBlogByURL, callInfo)
	mock.lockGetBlogByURL.Unlock()
	return mock.GetBlogByURLFunc(url)
}

// GetBlogByURLCalls gets all the calls that were made to GetBlogByURL.
// Check the length with:
//     len(mockedProjection.GetBlogByURLCalls())
func (mock *ProjectionMock) GetBlogByURLCalls() []struct {
	URL string
} {
	var calls []struct {
		URL string
	}
	mock.lockGetBlogByURL.RLock()
	calls = mock.calls.GetBlogByURL
	mock.lockGetBlogByURL.RUnlock()
	return calls
}

// GetCategories calls GetCategoriesFunc.
func (mock *ProjectionMock) GetCategories(page int, limit int, sortOptions map[string]string, filterOptions map[string]interface{}) ([]*api.Category, int64, error) {
	if mock.GetCategoriesFunc == nil {
		panic("ProjectionMock.GetCategoriesFunc: method is nil but Projection.GetCategories was just called")
	}
	callInfo := struct {
		Page          int
		Limit         int
		SortOptions   map[string]string
		FilterOptions map[string]interface{}
	}{
		Page:          page,
		Limit:         limit,
		SortOptions:   sortOptions,
		FilterOptions: filterOptions,
	}
	mock.lockGetCategories.Lock()
	mock.calls.GetCategories = append(mock.calls.GetCategories, callInfo)
	mock.lockGetCategories.Unlock()
	return mock.GetCategoriesFunc(page, limit, sortOptions, filterOptions)
}

// GetCategoriesCalls gets all the calls that were made to GetCategories.
// Check the length with:
//     len(mockedProjection.GetCategoriesCalls())
func (mock *ProjectionMock) GetCategoriesCalls() []struct {
	Page          int
	Limit         int
	SortOptions   map[string]string
	FilterOptions map[string]interface{}
} {
	var calls []struct {
		Page          int
		Limit         int
		SortOptions   map[string]string
		FilterOptions map[string]interface{}
	}
	mock.lockGetCategories.RLock()
	calls = mock.calls.GetCategories
	mock.lockGetCategories.RUnlock()
	return calls
}

// GetEventHandler calls GetEventHandlerFunc.
func (mock *ProjectionMock) GetEventHandler() weos.EventHandler {
	if mock.GetEventHandlerFunc == nil {
		panic("ProjectionMock.GetEventHandlerFunc: method is nil but Projection.GetEventHandler was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetEventHandler.Lock()
	mock.calls.GetEventHandler = append(mock.calls.GetEventHandler, callInfo)
	mock.lockGetEventHandler.Unlock()
	return mock.GetEventHandlerFunc()
}

// GetEventHandlerCalls gets all the calls that were made to GetEventHandler.
// Check the length with:
//     len(mockedProjection.GetEventHandlerCalls())
func (mock *ProjectionMock) GetEventHandlerCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetEventHandler.RLock()
	calls = mock.calls.GetEventHandler
	mock.lockGetEventHandler.RUnlock()
	return calls
}

// GetPosts calls GetPostsFunc.
func (mock *ProjectionMock) GetPosts(page int, limit int, query string, sortOptions map[string]string, filterOptions map[string]interface{}) ([]*api.Post, int64, error) {
	if mock.GetPostsFunc == nil {
		panic("ProjectionMock.GetPostsFunc: method is nil but Projection.GetPosts was just called")
	}
	callInfo := struct {
		Page          int
		Limit         int
		Query         string
		SortOptions   map[string]string
		FilterOptions map[string]interface{}
	}{
		Page:          page,
		Limit:         limit,
		Query:         query,
		SortOptions:   sortOptions,
		FilterOptions: filterOptions,
	}
	mock.lockGetPosts.Lock()
	mock.calls.GetPosts = append(mock.calls.GetPosts, callInfo)
	mock.lockGetPosts.Unlock()
	return mock.GetPostsFunc(page, limit, query, sortOptions, filterOptions)
}

// GetPostsCalls gets all the calls that were made to GetPosts.
// Check the length with:
//     len(mockedProjection.GetPostsCalls())
func (mock *ProjectionMock) GetPostsCalls() []struct {
	Page          int
	Limit         int
	Query         string
	SortOptions   map[string]string
	FilterOptions map[string]interface{}
} {
	var calls []struct {
		Page          int
		Limit         int
		Query         string
		SortOptions   map[string]string
		FilterOptions map[string]interface{}
	}
	mock.lockGetPosts.RLock()
	calls = mock.calls.GetPosts
	mock.lockGetPosts.RUnlock()
	return calls
}

// Migrate calls MigrateFunc.
func (mock *ProjectionMock) Migrate(ctx context.Context) error {
	if mock.MigrateFunc == nil {
		panic("ProjectionMock.MigrateFunc: method is nil but Projection.Migrate was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockMigrate.Lock()
	mock.calls.Migrate = append(mock.calls.Migrate, callInfo)
	mock.lockMigrate.Unlock()
	return mock.MigrateFunc(ctx)
}

// MigrateCalls gets all the calls that were made to Migrate.
// Check the length with:
//     len(mockedProjection.MigrateCalls())
func (mock *ProjectionMock) MigrateCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockMigrate.RLock()
	calls = mock.calls.Migrate
	mock.lockMigrate.RUnlock()
	return calls
}
